/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
(function() {
  "use strict";

  if (!navigator.id) navigator.id = {};

  /**
   * WARNING -
   * DO NOT TRUST THE CERTIFICATES GENERATED BY THIS FILE FOR ANYTHING
   * OTHER THAN TESTING. JWCRYPTO IS NOT PROPERLY SEEDED.
   */

  addScript("https://checkmyidp.org/bidbundle.js");

  var jwcrypto;

  navigator.id.beginProvisioning = function(cb) {
    // require must exist before trying to include jwcrypto.
    waitUntilExists("require", function() {
      jwcrypto = require('./lib/jwcrypto');

      // SEEDING WITH FIXED ENTROPY IS A BAD BAD THING TO DO.
      jwcrypto.addEntropy("sJ3/VNLAWaKhpqT54YMPiT9hppkOHMNYxk7W5cweloM=");

      var email = getQueryParameter("email");
      // certs must be good for at least 2 minutes. Try 3.
      cb(email, 180);
    });
  };

  navigator.id.genKeyPair = function(cb) {
    jwcrypto.generateKeypair({ algorithm: "DS", keysize: 128 }, function(err, kp) {
      cb(kp.publicKey.serialize());
    });
  };

  navigator.id.registerCertificate = function(certificate) {
    // a certificate has been generated, check it.
    if (checkCertificate(certificate)) {
      // a valid certificate
    }
  };

  navigator.id.raiseProvisioningFailure = function(reason) {
    // provisioning has failed. Show why
    var redirectTo = "https://checkmyidp.org/prov_failure" + toQueryString({
      reason: reason
    });

    location.href=redirectTo;
  };

  function getQueryParameter(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(window.location.href);
    if(results == null)
      return "";
    else
      return decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  function toQueryString(params) {
    var queryString = "?";
    var queryParams = [];
    for(var key in params) {
      queryParams.push(key + "=" + encodeURIComponent(params[key]));
    }
    return queryString + queryParams.join("&");
  }


  function addScript(src) {
    var script = document.createElement("script");
    script.setAttribute("src", src);
    document.head.appendChild(script);
  }

  function waitUntilExists(checkFor, done) {
    if(checkFor in window) return done();

    setTimeout(function() {
      waitUntilExists(checkFor, done);
    }, 100);
  }

  function checkCertificate(certificate) {
    try {
      var cert = jwcrypto.extractComponents(certificate);

      // if it expires in less than 2 minutes, it's too old to use.
      var diff = cert.payload.exp.valueOf() - new Date().getTime();
      if (diff < (60 * 2 * 1000)) {
        throw new Error("Certificate is expired: clock skew between " +
                        "your local clock and the IdP's clock can " +
                        " cause this failure: " + diff);
      }

      // or if it was issued before the last time the domain key
      // was updated, it's invalid
      if (!cert.payload.iat) {
        throw new Error('Malformed certificate: missing iat');
      }

    } catch(e) {
      console.error("Invalid certificate - ", String(e));
      return false;
    }

    return true;
  }

}());

